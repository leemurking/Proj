# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mEsRa6I5FUyL9LD2H1piDE0s4QSMjywe
"""

import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
import plotly.express as px
import pandas as pd

# Load your dataset
medical = pd.read_csv('https://raw.githubusercontent.com/leemurking/ev-_project/main/dataset_.csv')

# Map region names in the dataset to states in the U.S.
region_mapping = {
    'northeast': ['NY', 'PA', 'NJ', 'MA', 'NH', 'VT', 'ME', 'RI', 'CT'],
    'southeast': ['FL', 'GA', 'NC', 'SC', 'VA', 'WV', 'AL', 'MS', 'TN', 'KY'],
    'southwest': ['TX', 'OK', 'NM', 'AZ'],
    'northwest': ['WA', 'OR', 'ID', 'MT', 'WY']
}

# Expand the region mapping to create a dataframe
region_df = pd.DataFrame([
    {'region': region, 'state': state}
    for region, states in region_mapping.items()
    for state in states
])

# Calculate average medical charges by region
avg_charges_by_region = medical.groupby('region')['medical charges'].mean().reset_index()

# Merge the average charges with the region mapping
merged_df = pd.merge(region_df, avg_charges_by_region, on='region')

# Create the choropleth map
choropleth_map = px.choropleth(
    merged_df,
    locations='state',
    locationmode='USA-states',
    color='medical charges',
    hover_name='region',
    scope='usa',
    title='Average Medical Charges by Region',
    color_continuous_scale='Viridis'
)

choropleth_map.update_layout(geo=dict(bgcolor='rgba(0,0,0,0)'), title=dict(x=0.5))

# Other visualizations
age_hist = px.histogram(medical, x='age', nbins=15, title='Age Distribution', template='plotly_white')
age_box = px.box(medical, x='age', title='Age Distribution (Box Plot)', template='plotly_white')

gender_pie = px.pie(medical, names='sex', title='Gender Distribution')
gender_bar = px.bar(medical['sex'].value_counts(), title='Gender Distribution', labels={'index': 'Gender', 'value': 'Count'})

bmi_hist = px.histogram(medical, x='bmi', nbins=15, title='BMI Distribution', template='plotly_white')
bmi_box = px.box(medical, x='bmi', title='BMI Distribution (Box Plot)', template='plotly_white')
bmi_scatter = px.scatter(medical, x='age', y='bmi', color='sex', title='BMI vs Age')

children_bar = px.bar(medical['children'].value_counts(), title='Number of Children', labels={'index': 'Children', 'value': 'Count'})

smoker_pie = px.pie(medical, names='smoker', title='Smoker Distribution')
smoker_bar = px.bar(medical.groupby('smoker')['medical charges'].mean(), title='Average Medical Charges by Smoking Status', labels={'index': 'Smoker', 'value': 'Avg Medical Charges'})

region_pie = px.pie(medical, names='region', title='Region Distribution')
region_bar = px.bar(medical.groupby('region')['medical charges'].mean(), title='Average Medical Charges by Region', labels={'index': 'Region', 'value': 'Avg Medical Charges'})
region_box = px.box(medical, x='region', y='medical charges', title='Medical Charges Distribution by Region')

charges_hist = px.histogram(medical, x='medical charges', nbins=20, title='Medical Charges Distribution', template='plotly_white')
charges_box = px.box(medical, x='medical charges', title='Medical Charges Distribution (Box Plot)', template='plotly_white')

age_vs_charges = px.scatter(medical, x='age', y='medical charges', color='smoker', title='Medical Charges vs Age')
bmi_vs_charges = px.scatter(medical, x='bmi', y='medical charges', color='smoker', title='Medical Charges vs BMI')
children_vs_charges = px.scatter(medical, x='children', y='medical charges', color='smoker', title='Medical Charges vs Number of Children')

gender_smoker_box = px.box(medical, x='sex', y='medical charges', color='smoker', title='Medical Charges by Gender and Smoking Status')

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server
# Apply custom CSS
app.index_string = '''
<!DOCTYPE html>
<html>
<head>
    {%metas%}
    <title>{%title%}</title>
    {%favicon%}
    {%css%}
    <style>
        body {
            background-color: #f8f9fa;
        }
        h1 {
            color: #007bff;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            transition: 0.3s;
        }
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }
        .graph-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #343a40;
        }
        .graph-description {
            font-size: 14px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    {%app_entry%}
    <footer>
        {%config%}
        {%scripts%}
        {%renderer%}
    </footer>
</body>
</html>
'''

# Layout the dashboard
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1("Medical Charges Prediction & Analysis Dashboard", className='text-center mb-4'), width=12)
    ]),

    dbc.Row([
        dbc.Col([
            dcc.Input(id='input-age', type='number', placeholder='Age', className='mb-3'),
            dcc.Input(id='input-bmi', type='number', placeholder='BMI', className='mb-3'),
            dcc.Dropdown(id='input-sex', options=[
                {'label': 'Male', 'value': 1},
                {'label': 'Female', 'value': 0}
            ], placeholder='Sex', className='mb-3'),
            dcc.Dropdown(id='input-smoker', options=[
                {'label': 'Yes', 'value': 1},
                {'label': 'No', 'value': 0}
            ], placeholder='Smoker', className='mb-3'),
            dcc.Dropdown(id='input-region', options=[
                {'label': 'Northeast', 'value': 0},
                {'label': 'Southeast', 'value': 1},
                {'label': 'Southwest', 'value': 2},
                {'label': 'Northwest', 'value': 3}
            ], placeholder='Region', className='mb-3'),
            dcc.Input(id='input-children', type='number', placeholder='Children', className='mb-3'),
            html.Button('Predict', id='predict-button', n_clicks=0, className='mb-3'),
            html.H3(id='prediction-output', className='text-center')
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=choropleth_map),
                html.P("This choropleth map shows the average medical charges by region across the United States.", className='graph-description')
            ], body=True)
        ], width=6)
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=age_hist),
                html.P("This histogram shows the distribution of ages in the dataset.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=age_box),
                html.P("This box plot shows the spread and outliers in the age data.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=gender_pie),
                html.P("This pie chart shows the proportion of males vs. females.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=gender_bar),
                html.P("This bar chart compares the number of males and females.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=bmi_hist),
                html.P("This histogram shows the distribution of BMI values in the dataset.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=bmi_box),
                html.P("This box plot shows the spread and outliers in the BMI data.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=bmi_scatter),
                html.P("This scatter plot shows the relationship between age and BMI, colored by sex.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=children_bar),
                html.P("This bar chart shows the number of children per insured person.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=smoker_pie),
                html.P("This pie chart shows the proportion of smokers vs. non-smokers.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=smoker_bar),
                html.P("This bar chart compares the average medical charges for smokers and non-smokers.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=region_pie),
                html.P("This pie chart shows the distribution of regions in the dataset.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=region_bar),
                html.P("This bar chart shows the average medical charges by region.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=region_box),
                html.P("This box plot shows the distribution of medical charges across different regions.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=charges_hist),
                html.P("This histogram shows the distribution of medical charges in the dataset.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=charges_box),
                html.P("This box plot shows the spread and outliers in the medical charges data.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=age_vs_charges),
                html.P("This scatter plot shows the relationship between age and medical charges, colored by smoking status.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=bmi_vs_charges),
                html.P("This scatter plot shows the relationship between BMI and medical charges, colored by smoking status.", className='graph-description')
            ], body=True)
        ], width=6),
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=children_vs_charges),
                html.P("This scatter plot shows the relationship between the number of children and medical charges, colored by smoking status.", className='graph-description')
            ], body=True)
        ], width=6),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dcc.Graph(figure=gender_smoker_box),
                html.P("This box plot shows medical charges by gender, separated by smoking status.", className='graph-description')
            ], body=True)
        ], width=12)
    ])
])

# Callback function for prediction
@app.callback(
    dash.dependencies.Output('prediction-output', 'children'),
    [
        dash.dependencies.Input('input-age', 'value'),
        dash.dependencies.Input('input-bmi', 'value'),
        dash.dependencies.Input('input-sex', 'value'),
        dash.dependencies.Input('input-smoker', 'value'),
        dash.dependencies.Input('input-region', 'value'),
        dash.dependencies.Input('input-children', 'value'),
        dash.dependencies.Input('predict-button', 'n_clicks')
    ]
)
def predict_charges(age, bmi, sex, smoker, region, children, n_clicks):
    if n_clicks > 0 and age is not None and bmi is not None and sex is not None and smoker is not None and region is not None and children is not None:
        # Example prediction logic (replace with your model's logic)
        predicted_charges = age * bmi * (smoker + 1) * 100 + region * 500 + children * 200
        return f'Predicted Medical Charges: ${predicted_charges:.2f}'
    return ''

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
